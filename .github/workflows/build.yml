name: Build

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, edited]
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Load cached pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Check Poetry lock file consistency
        run: poetry check --lock

      - name: Run pre-commit checks
        run: poetry run pre-commit run --all-files

      - name: Verify Poetry export is up to date
        run: |
          # Generate requirements.txt and check if it matches the committed version
          poetry export -o requirements-check.txt --with=dev --without-hashes
          if ! cmp -s requirements.txt requirements-check.txt; then
            echo "❌ requirements.txt is out of date. Please run 'poetry export -o requirements.txt --with=dev --without-hashes' and commit the changes."
            echo "Expected:"
            cat requirements-check.txt
            echo "Actual:"
            cat requirements.txt
            exit 1
          else
            echo "✅ requirements.txt is up to date"
          fi
          rm requirements-check.txt

      - name: Static type checking with mypy
        run: poetry run mypy src/django_setup_tools/ || true  # Allow failure for now

      - name: Check for obsolete dependencies
        run: poetry run deptry . || true  # Allow failure for now

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Run bandit security linter
        run: |
          poetry add --group dev bandit[toml]
          poetry run bandit -r src/django_setup_tools/ -f json -o bandit-report.json || true

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Run safety check for known vulnerabilities
        run: |
          poetry add --group dev safety
          poetry run safety check --json --output safety-report.json || true

      - name: Upload safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: safety-report.json

  package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-poetry-env

      - name: Build package
        run: poetry build

      - name: Check package metadata
        run: poetry check

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
